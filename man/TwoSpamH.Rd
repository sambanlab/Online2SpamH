% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/online_2spamh.R
\name{TwoSpamH}
\alias{TwoSpamH}
\title{TwoSpamH}
\usage{
TwoSpamH(
  data,
  passive_variable,
  phone_usage_vars,
  activity_level_vars,
  thresholds = data.frame(lower_bound_phone_usage = 0.3, upper_bound_phone_usage = 0.7,
    lower_bound_activity_level = 0.3, upper_bound_activity_level = 0.7),
  num.neighbor = 5,
  check.cor = NULL,
  plot.data = F,
  seed = NULL
)
}
\arguments{
\item{data}{dataset to run 2SpamH on}

\item{passive_variable}{passive variable name to be labeled as missing or non-missing}

\item{phone_usage_vars}{vector of strings of phone usage variable names from data}

\item{activity_level_vars}{vector of strings of activity level variable names from data}

\item{thresholds}{data frame with thresholds for activity level and phone usage (look at examples for formatting)}

\item{num.neighbor}{number of neighbors for KNN algorithm}

\item{check.cor}{change to correlation value (if correlation between phone usage and activity level is above this value, use only one of them to avoid overfitting)}

\item{plot.data}{Boolean whether to plot the data}

\item{seed}{set seed}
}
\value{
original dataset with column 'label' with "Missing"/"Non-missing" values
}
\description{
A function to run 2SpamH algorithm and identify all observations in data frame as "Missing" or "Non-missing" with pre-defined set of thresholds
}
\examples{
# Load example data
data("example_data")

# Define variables
passive_variable <- "step_count"
activity_level_vars <- "n_uploads"
phone_usage_vars <- c("screen_unlocks", "display_events")
all_vars <- c(passive_variable, activity_level_vars, phone_usage_vars)

# Run TwoSpamH with example thresholds
thresholds <- data.frame(
  lower_bound_phone_usage = 0.2,
  upper_bound_phone_usage = 0.8,
  lower_bound_activity_level = 0.3,
  upper_bound_activity_level = 0.7
)

TwoSpamH(
  data = example_data,
  passive_variable = passive_variable,
  phone_usage_vars = phone_usage_vars,
  activity_level_vars = activity_level_vars,
  thresholds = thresholds,
  plot.data = TRUE
)

}
